---
import OptionalLink from "@components/common/OptionalLink";
import NavbarDropdown from "./NavbarDropdown.astro";
import getMenu from "@libs/menu";
import type { Language } from "@libs/language";

export interface Props {
  language: Language;
}

const { language } = Astro.props;
const menu = await getMenu(language);
---

<ul
  class:list={[
    // dropdown position is relative to this
    "relative",
    // Flexbox and justify content to the right
    "flex justify-end",
  ]}
>
  {
    menu.map((topItem) => (
      <>
        <li
          class:list={[
            "nav",
            // let the children to refer the parent hover status
            // https://tailwindcss.com/docs/hover-focus-and-other-states#styling-based-on-parent-state
            "group/nav",
            // basic placement
            "block px-2.5 py-1",
            // color change when in hover
            "text-black hover:bg-darkviolet hover:text-white",
            // mouse cursor is a hand
            "cursor-pointer",
            // do not shrink if not enough space. shrinking makes the link text to wrap. we'd rater expand the size
            "shrink-0",
          ]}
        >
          <OptionalLink url={topItem.url}>{topItem.name}</OptionalLink>

          {topItem.children && (
            <div
              class:list={[
                "nav-content",
                // show the menu when parent link is in hover. hidden class will disable transition, do not use
                "opacity-0 invisible group-[.nav-on]/nav:opacity-100 group-[.nav-on]/nav:visible",
                // initially the menu is behind all content so that initial mouse cursor won't accidentally hover
                // over dropdown menu and activate the dropdown
                "-z-10 group-[.nav-on]/nav:z-10",
                // place right below the navbar with same width
                "absolute top-full right-0 w-full",
                // min width 30 charactors in case parent is not wide enough
                "min-w-[30ch]",
                // override the mouse cursor back to default
                "cursor-auto",
                // dropdown animation only on opacity to avoid glitches animating on z-index
                "transition-[opacity] motion-reduce:transition-none",
              ]}
            >
              <NavbarDropdown
                items={topItem.children}
                singleColumn={language == "en"}
              />
            </div>
          )}
        </li>
      </>
    ))
  }
</ul>

<script>
  function setNavOn(nav: Element) {
    nav.classList.add("nav-on");
  }
  function setNavOff(nav: Element) {
    nav.classList.remove("nav-on");
  }
  function setNavOffAll() {
    document.querySelectorAll(".nav").forEach((nav) => {
      setNavOff(nav);
    });
  }
  function isInsideSelector(elem: Element, selector: string) {
    while (true) {
      if (elem.matches(selector)) return true;
      if (elem.parentElement != null) {
        elem = elem.parentElement;
      } else {
        break;
      }
    }
    return false;
  }
  document.querySelectorAll(".nav").forEach((nav) => {
    nav.addEventListener("mouseenter", () => {
      setNavOn(nav);
    });
    nav.addEventListener("mouseleave", () => {
      setNavOff(nav);
    });
    nav.addEventListener("touchend", (ev: Event) => {
      if (isInsideSelector(ev.target as Element, ".nav-content")) {
        return;
      }
      if (nav.classList.contains("nav-on")) {
        setNavOffAll();
      } else {
        setNavOffAll();
        setNavOn(nav);
      }
    });
  });
  window.addEventListener("touchend", (ev: Event) => {
    if (
      !isInsideSelector(ev.target as Element, ".nav") &&
      !isInsideSelector(ev.target as Element, ".nav-content")
    ) {
      setNavOffAll();
    }
  });
</script>
