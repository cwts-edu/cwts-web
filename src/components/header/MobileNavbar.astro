---
import LanguagePicker from "./LanguagePicker.astro";
import { Icon } from "astro-icon";
import OptionalLink from "@components/common/OptionalLink.astro";
import getMenu from "@libs/menu";
import NavbarDropdown from "./NavbarDropdown.astro";
import type { Shortcut } from "@libs/shortcuts";
import getShortcuts from "@libs/shortcuts";
import logoTextEn from "@assets/logo-text-en-light-violet.svg";
import { Language, T } from "@libs/language";
import Button from "@components/common/Button.astro";

export interface Props {
  language: Language;
}

const { language } = Astro.props;

const shortcuts = getShortcuts(language);
const shortcutsRows: Shortcut[][] = [];
let shortcutsRow: Shortcut[] = [];
shortcuts.forEach((shortcut) => {
  if (shortcut.breakBefore == true && shortcutsRow.length > 0) {
    shortcutsRows.push(shortcutsRow);
    shortcutsRow = [];
  }
  shortcutsRow.push(shortcut);
});
if (shortcutsRow.length > 0) {
  shortcutsRows.push(shortcutsRow);
}

const menu = await getMenu(language);
const menuWithChildren = menu.filter((menuItem) => !!menuItem.children);
const menuWithoutChildren = menu.filter((menuItem) => !menuItem.children);
---

<div id="menuContainer" class="group/menu">
  <div
    id="menuInner"
    class:list={[
      // hidden in desktop view
      "lg:hidden",
      // Column of navbar and menu
      "flex flex-col",
      // bring to the top layer
      "z-50",
      // background color
      "bg-maxpurple",
      // white text color and 18px font size
      "text-white text-lg",
      // fixed on the viewport
      "fixed",
      // tablet view sticky to the top, phone view sticky to the bottom
      "md:top-0 max-md:bottom-0",
      // different height in tablet and phone views when collapsed
      "md:max-h-12 max-h-16",
      // no scroll bar when collapsed
      "overflow-hidden",
      // when the menu is toggled on, set max height is full viewport. actual height is based on content
      "group-[.menu-on]/menu:max-h-full",
      // full width
      "w-full",
      // transition animation
      "transition-all motion-reduce:transition-none",
      // When expanded, add little round corners on top (mobile) or down (tablet)
      "group-[.menu-on]/menu:max-md:rounded-t-lg",
      "group-[.menu-on]/menu:md:rounded-b-lg",
    ]}
  >
    <div
      class:list={[
        // flex row taking full width
        "flex w-full",
        // different height, should be consistant with max-height of parent when collapsed
        "md:h-12 h-16",
        // language picker and menu button should be at both end of the bar
        "justify-between",
        // in case they are not in same height, they should be aligned in the middle vertially
        "items-center",
        // no matter how parent changes the size, the bar size should stay the same
        "grow-0 shrink-0",
        // padding on left and right ends
        "px-6",
      ]}
    >
      <LanguagePicker />
      <div class="flex">
        <a role="button" id="menuToggler" class="cursor-pointer">
          {T("menu", language)}
          <Icon
            name="menu"
            class:list={[
              // show menu icon when collapsed
              "group-[.menu-on]/menu:hidden inline",
              // set similar size as text and align with text
              "h-5 align-middle",
            ]}
          />
          <Icon
            name="close"
            class:list={[
              // show close icon when expanded
              "group-[.menu-on]/menu:inline hidden",
              // set similar size as text and align with text
              "h-5 align-middle",
            ]}
          />
        </a>
      </div>
    </div>
    <div class="grow overflow-y-auto px-6">
      {
        menuWithChildren &&
          menuWithChildren.map((topItem) => (
            <>
              <div class="group/submenu submenu-container first:border-t-0 border-t border-gray-300">
                <div
                  class:list={[
                    "submenu-toggler",
                    "flex justify-between",
                    "py-2",
                    "text-2xl",
                    "font-medium",
                    "cursor-pointer",
                  ]}
                >
                  <div>
                    <OptionalLink url={topItem.url}>
                      {topItem.name}
                    </OptionalLink>
                  </div>
                  <div>
                    <Icon
                      name="expand-circle-down"
                      class:list={[
                        // rotate up-side-down when expanded
                        "group-[.submenu-on]/submenu:rotate-180",
                        // set similar size as text and align with text
                        "h-7 align-middle",
                      ]}
                    />
                  </div>
                </div>
                <div
                  class:list={[
                    "max-h-0 group-[.submenu-on]/submenu:max-h-[1000rem]",
                    "overflow-y-hidden",
                    "group-[.submenu-on]/submenu:transition-all motion-reduce:transition-none",
                  ]}
                >
                  <NavbarDropdown
                    items={topItem.children!}
                    singleColumn={true}
                  />
                </div>
              </div>
            </>
          ))
      }
      {
        menuWithoutChildren && (
          <div
            class:list={[
              "first:border-t-0 border-t border-gray-3 ",
              "py-2",
              "text-2xl",
              "flex",
            ]}
          >
            {menuWithoutChildren.map((topItem) => (
              <>
                <div
                  class:list={[
                    "first:border-l-0",
                    "border-l border-white",
                    "first:pl-0 px-3",
                  ]}
                >
                  <div>
                    <OptionalLink url={topItem.url}>
                      {topItem.name}
                    </OptionalLink>
                  </div>
                </div>
              </>
            ))}
          </div>
        )
      }
      <form
        class:list={[
          // position and sizing
          "my-2 px-6 py-2 text-xl text-black",
          // rounded white box
          "bg-white rounded-lg",
          // flexbox row
          "flex justify-between items-center",
        ]}
        action={`/${language}/search`}
        method="get"
      >
        <div class="grow">
          <input
            class="w-full border-0 py-1"
            type="text"
            placeholder={T("search", language)}
            name="q"
          />
        </div>
        <div>
          <button type="submit" class="align-middle">
            <Icon name="search-sharp" class="text-darkviolet h-7" />
          </button>
        </div>
      </form>
      <div class:list={["flex flex-col items-start py-4 gap-6 text-lg"]}>
        {
          shortcutsRows.map((row) => (
            <ul class="list-none flex gap-6">
              {row.map((item) => {
                switch (item.type) {
                  case "button":
                    return (
                      <li>
                        <Button
                          classNames={["btn-xl"]}
                          url={item.url}
                          text={item.name}
                        />
                      </li>
                    );
                  default:
                    return (
                      <li>
                        <a href={item.url}>{item.name}</a>
                      </li>
                    );
                }
              })}
            </ul>
          ))
        }
      </div>
      <div class="pt-3 pb-12">
        <img src={logoTextEn} height="70" />
      </div>
    </div>
  </div>
  <div
    id="menuBack"
    class:list={[
      // hidden by default, show on menu is expanded
      "hidden group-[.menu-on]/menu:block",
      // take the full screen
      "fixed left-0 top-0 w-full h-full",
      // behind the menu but above everything else
      "z-40",
      // color and transparency
      "bg-black opacity-80",
    ]}
  >
  </div>
</div>
<script>
  import Toggler from "@scripts/toggle";
  const menuToggler = new Toggler(
    document.getElementById("menuContainer"),
    "menu-on"
  );
  menuToggler.attachToggler(document.getElementById("menuToggler"));
  menuToggler.attachCloser(document.getElementById("menuBack"));

  const submenuTogglerList: Toggler[] = [];
  document.querySelectorAll(".submenu-container").forEach((elem: Element) => {
    const submenuToggler = new Toggler(elem, "submenu-on");
    submenuTogglerList.push(submenuToggler);
    elem.querySelector(".submenu-toggler")?.addEventListener("click", () => {
      // Fix the menuInner height on mobile view
      let menuInner = document.getElementById("menuInner")!;
      if (menuInner.offsetTop > 0) {
        menuInner.style.height = `${menuInner.offsetHeight}px`;
      }

      submenuToggler.toggle();
      submenuTogglerList.forEach((t) => {
        if (t != submenuToggler) t.off();
      });
    });
  });
</script>
